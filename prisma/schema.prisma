// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  sermons       Sermon[]
  events        Event[]
  donations     Donation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  USER
  ADMIN
}

model Sermon {
  id          String   @id @default(cuid())
  title       String
  description String?   @db.Text
  speaker     String
  date        DateTime
  videoUrl    String?
  thumbnailUrl String?
  audioUrl    String?
  category    String?
  tags        String[]
  featured    Boolean  @default(false)
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?   @db.Text
  date        DateTime
  endDate     DateTime?
  time        String?
  location    String?
  thumbnailUrl String?
  category    String?
  featured    Boolean  @default(false)
  registrationRequired Boolean @default(false)
  registrationUrl String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  attendees   EventAttendee[]
}

model EventAttendee {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  createdAt DateTime @default(now())
  
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Donation {
  id            String        @id @default(cuid())
  amount        Float
  currency      String        @default("USD")
  status        DonationStatus @default(COMPLETED)
  paymentMethod String?
  paymentId     String?
  description   String?
  anonymous     Boolean       @default(false)
  createdAt     DateTime      @default(now())
  
  userId        String?
  user          User?         @relation(fields: [userId], references: [id])
  fundId        String?
  fund          Fund?         @relation(fields: [fundId], references: [id])
}

enum DonationStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Fund {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  goal        Float?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  donations   Donation[]
}

